// Generated by CoffeeScript 2.5.1
(function() {
  var DEBUG_HACKS, express, fs, idFromArg, lastId, loadPlaylist, main, play, playNext, playlist, queue, run, savePlaylist, sockets;

  express = require('express');

  fs = require('fs');

  DEBUG_HACKS = false;

  sockets = {};

  playlist = {};

  queue = [];

  lastId = "";

  loadPlaylist = function() {
    if (fs.existsSync("playlist.json")) {
      return playlist = JSON.parse(fs.readFileSync("playlist.json", 'utf8'));
    }
  };

  savePlaylist = function() {
    return fs.writeFileSync("playlist.json", JSON.stringify(playlist, null, 2));
  };

  play = function(id) {
    var socket, socketId;
    for (socketId in sockets) {
      socket = sockets[socketId];
      socket.emit('play', {
        id: id
      });
    }
    lastId = id;
  };

  playNext = function() {
    var i, index, j, k, len, nextId, unshuffled;
    if (queue.length < 1) {
      unshuffled = Object.keys(playlist);
      if (unshuffled.length > 0) {
        queue = [unshuffled.shift()];
        for (index = k = 0, len = unshuffled.length; k < len; index = ++k) {
          i = unshuffled[index];
          j = Math.floor(Math.random() * (index + 1));
          queue.push(queue[j]);
          queue[j] = i;
        }
      }
    }
    if (queue.length < 1) {
      console.log("Nothing to play!");
      return null;
    }
    nextId = queue.shift();
    play(nextId);
    return nextId;
  };

  idFromArg = function(arg) {
    var url, v;
    if (arg == null) {
      return null;
    }
    arg = String(arg);
    try {
      url = new URL(arg);
    } catch (error) {
      return arg;
    }
    console.log(url);
    if (url.hostname === 'youtu.be') {
      return url.pathname.replace(/^\//, "");
    }
    if (url.hostname.match(/youtube.com$/)) {
      v = url.searchParams.get('v');
      console.log(`v: ${v}`);
      if (v != null) {
        return v;
      }
    }
    return null;
  };

  run = function(args) {
    var id;
    if (args.length < 1) {
      return "MTV: No command given.";
    }
    switch (args[0]) {
      case 'what':
      case 'whatisthis':
      case 'who':
        return `MTV: Currently Playing https://youtu.be/${lastId}`;
      case 'play':
        id = idFromArg(args[1]);
        if (id == null) {
          return "MTV: play: invalid argument";
        }
        play(id);
        return `MTV: Playing ${id}`;
      case 'add':
        id = idFromArg(args[1]);
        if (id == null) {
          return "MTV: add: invalid argument";
        }
        playlist[id] = true;
        savePlaylist();
        return `MTV: Added to pool: ${id}`;
      case 'queue':
      case 'q':
        id = idFromArg(args[1]);
        if (id == null) {
          return "MTV: queue: invalid argument";
        }
        queue.unshift(id);
        playlist[id] = true;
        savePlaylist();
        return `MTV: Queued next and added to pool: ${id}`;
      case 'shuffle':
        queue = [];
        id = playNext();
        return `MTV: Shuffled and playing a fresh song: ${id}`;
      case 'remove':
      case 'delete':
      case 'del':
        id = idFromArg(args[1]);
        if (id == null) {
          return "MTV: remove: invalid argument";
        }
        if (playlist[id] != null) {
          delete playlist[id];
          savePlaylist();
          return `MTV: Deleted ${id} from shuffled pool.`;
        } else {
          return `MTV: ${id} is already not in the shuffled pool.`;
        }
        break;
      case 'next':
      case 'skip':
        id = playNext();
        return `MTV: Playing ${id}`;
    }
    return `MTV: unknown command ${args[0]}`;
  };

  main = function() {
    var app, argv, http, io;
    argv = process.argv.slice(2);
    if (argv.length > 0) {
      console.log("Debug hacks enabled.");
      DEBUG_HACKS = true;
    }
    loadPlaylist();
    // playlist['mczmFWlWPOI'] = true
    // playlist['EQzvQO2LcA4'] = true
    app = express();
    http = require('http').createServer(app);
    io = require('socket.io')(http);
    io.on('connection', function(socket) {
      sockets[socket.id] = socket;
      socket.on('ready', function(msg) {
        return playNext();
      });
      return socket.on('disconnect', function() {
        if (sockets[socket.id] != null) {
          return delete sockets[socket.id];
        }
      });
    });
    app.get('/', function(req, res) {
      var html;
      html = fs.readFileSync(`${__dirname}/../web/client.html`, "utf8");
      // html = html.replace(/!PLAYERID!/, pid)
      // html = html.replace(/!TABLEID!/, tid)
      return res.send(html);
    });
    app.get('/cmd', function(req, res) {
      var args, response;
      if (req.query.cmd != null) {
        args = req.query.cmd.split(/\s+/g);
        response = run(args);
        console.log(`CMD: ${response}`);
        res.send(response);
        return;
      }
      return res.send("MTV: wat");
    });
    app.use(express.static('web'));
    return http.listen(3003, function() {
      return console.log('listening on *:3003');
    });
  };

  module.exports = main;

}).call(this);
